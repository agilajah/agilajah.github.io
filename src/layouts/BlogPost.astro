---
import type { CollectionEntry } from "astro:content";

import Masthead from "@/components/blog/Masthead.astro";
import TOC from "@/components/blog/TOC.astro";
import WebMentions from "@/components/blog/webmentions/index.astro";

import BaseLayout from "./Base.astro";

interface Props {
	post: CollectionEntry<"post">;
}

const { post } = Astro.props;
const {
	data: { description, ogImage, publishDate, title, updatedDate },
	slug,
} = post;
const socialImage = ogImage ?? `/og-image/${slug}.png`;

function formatDate(date: unknown): string {
	if (!date) return "";
	if (typeof date === "string") {
		const d = new Date(date);
		return isNaN(d.getTime()) ? date : d.toISOString();
	}
	if (date instanceof Date) {
		return date.toISOString();
	}
	return String(date);
}

const articleDate = formatDate(updatedDate) || formatDate(publishDate);

const { headings } = await post.render();
---

<BaseLayout meta={{ articleDate, description, ogImage: socialImage, title }}>
	<div class="gap-x-10 lg:flex lg:items-start">
		{!!headings.length && <TOC headings={headings} />}
		<article class="flex-grow break-words" data-pagefind-body>
			<div id="blog-hero"><Masthead content={post} /></div>
			<div
				class="prose prose-sm prose-cactus mt-12 prose-headings:font-semibold prose-headings:text-accent-2 prose-headings:before:absolute prose-headings:before:-ms-4 prose-headings:before:text-accent sm:prose-headings:before:content-['#'] sm:prose-th:before:content-none"
			>
				<slot />
				<WebMentions />
			</div>
		</article>
	</div>
	<button
		aria-label="Back to Top"
		class="z-90 fixed bottom-8 end-4 flex h-10 w-10 translate-y-28 items-center justify-center rounded-full border-2 border-transparent bg-zinc-200 text-3xl opacity-0 transition-all duration-300 hover:border-zinc-400 data-[show=true]:translate-y-0 data-[show=true]:opacity-100 dark:bg-zinc-700 sm:end-8 sm:h-12 sm:w-12"
		data-show="false"
		id="to-top-btn"
		><svg
			aria-hidden="true"
			class="h-6 w-6"
			fill="none"
			focusable="false"
			stroke="currentColor"
			stroke-width="2"
			viewBox="0 0 24 24"
			xmlns="http://www.w3.org/2000/svg"
		>
			<path d="M4.5 15.75l7.5-7.5 7.5 7.5" stroke-linecap="round" stroke-linejoin="round"></path>
		</svg>
	</button>
</BaseLayout>

<script>
	// Get all headings in the content
	const contentHeadings = document.querySelectorAll(
		"article h1, article h2, article h3, article h4"
	);
	// Get all links in the TOC
	const tocLinks = document.querySelectorAll(".toc-link");

	// Create an intersection observer
	const observerOptions = {
		root: null,
		rootMargin: "0px 0px -40% 0px",
		threshold: 1.0,
	};

	const observer = new IntersectionObserver((entries) => {
		entries.forEach((entry) => {
			const id = entry.target.getAttribute("id");
			const tocLink = document.querySelector(`.toc-link[href="#${id}"]`);

			if (entry.isIntersecting) {
				// Remove active class from all links
				tocLinks.forEach((link) => link.classList.remove("active"));
				// Add active class to current link
				if (tocLink) tocLink.classList.add("active");
			}
		});
	}, observerOptions);

	// Observe all headings
	contentHeadings.forEach((heading) => {
		observer.observe(heading);
	});
</script>
